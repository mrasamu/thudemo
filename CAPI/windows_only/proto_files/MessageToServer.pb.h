// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageToServer.proto

#undef min
#undef max

#ifndef GOOGLE_PROTOBUF_INCLUDED_MessageToServer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MessageToServer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "MessageToClient.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MessageToServer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MessageToServer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MessageToServer_2eproto;
namespace Protobuf {
class MessageToServer;
class MessageToServerDefaultTypeInternal;
extern MessageToServerDefaultTypeInternal _MessageToServer_default_instance_;
}  // namespace Protobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::Protobuf::MessageToServer* Arena::CreateMaybeMessage<::Protobuf::MessageToServer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protobuf {

enum CommandType : int {
  Move = 0,
  Pick = 1,
  Put = 2,
  Use = 3,
  Stop = 4,
  Speak = 5,
  CommandTypeSize = 6,
  CommandType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CommandType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CommandType_IsValid(int value);
constexpr CommandType CommandType_MIN = Move;
constexpr CommandType CommandType_MAX = CommandTypeSize;
constexpr int CommandType_ARRAYSIZE = CommandType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandType_descriptor();
template<typename T>
inline const std::string& CommandType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CommandType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CommandType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CommandType_descriptor(), enum_t_value);
}
inline bool CommandType_Parse(
    const std::string& name, CommandType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CommandType>(
    CommandType_descriptor(), name, value);
}
// ===================================================================

class MessageToServer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protobuf.MessageToServer) */ {
 public:
  MessageToServer();
  virtual ~MessageToServer();

  MessageToServer(const MessageToServer& from);
  MessageToServer(MessageToServer&& from) noexcept
    : MessageToServer() {
    *this = ::std::move(from);
  }

  inline MessageToServer& operator=(const MessageToServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageToServer& operator=(MessageToServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageToServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageToServer* internal_default_instance() {
    return reinterpret_cast<const MessageToServer*>(
               &_MessageToServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MessageToServer* other);
  friend void swap(MessageToServer& a, MessageToServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessageToServer* New() const final {
    return CreateMaybeMessage<MessageToServer>(nullptr);
  }

  MessageToServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageToServer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageToServer& from);
  void MergeFrom(const MessageToServer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageToServer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protobuf.MessageToServer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MessageToServer_2eproto);
    return ::descriptor_table_MessageToServer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string SpeakText = 9;
  void clear_speaktext();
  static const int kSpeakTextFieldNumber = 9;
  const std::string& speaktext() const;
  void set_speaktext(const std::string& value);
  void set_speaktext(std::string&& value);
  void set_speaktext(const char* value);
  void set_speaktext(const char* value, size_t size);
  std::string* mutable_speaktext();
  std::string* release_speaktext();
  void set_allocated_speaktext(std::string* speaktext);

  // int64 ID = 1;
  void clear_id();
  static const int kIDFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // .Protobuf.CommandType CommandType = 2;
  void clear_commandtype();
  static const int kCommandTypeFieldNumber = 2;
  ::Protobuf::CommandType commandtype() const;
  void set_commandtype(::Protobuf::CommandType value);

  // .Protobuf.Direction MoveDirection = 3;
  void clear_movedirection();
  static const int kMoveDirectionFieldNumber = 3;
  ::Protobuf::Direction movedirection() const;
  void set_movedirection(::Protobuf::Direction value);

  // double ThrowDistance = 5;
  void clear_throwdistance();
  static const int kThrowDistanceFieldNumber = 5;
  double throwdistance() const;
  void set_throwdistance(double value);

  // double ThrowAngle = 6;
  void clear_throwangle();
  static const int kThrowAngleFieldNumber = 6;
  double throwangle() const;
  void set_throwangle(double value);

  // int32 MoveDuration = 4;
  void clear_moveduration();
  static const int kMoveDurationFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 moveduration() const;
  void set_moveduration(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 UseType = 8;
  void clear_usetype();
  static const int kUseTypeFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int32 usetype() const;
  void set_usetype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // double Parameter1 = 10;
  void clear_parameter1();
  static const int kParameter1FieldNumber = 10;
  double parameter1() const;
  void set_parameter1(double value);

  // double Parameter2 = 11;
  void clear_parameter2();
  static const int kParameter2FieldNumber = 11;
  double parameter2() const;
  void set_parameter2(double value);

  // bool IsThrowDish = 7;
  void clear_isthrowdish();
  static const int kIsThrowDishFieldNumber = 7;
  bool isthrowdish() const;
  void set_isthrowdish(bool value);

  // bool IsSetTalent = 12;
  void clear_issettalent();
  static const int kIsSetTalentFieldNumber = 12;
  bool issettalent() const;
  void set_issettalent(bool value);

  // bool IsPickSelfPosition = 13;
  void clear_ispickselfposition();
  static const int kIsPickSelfPositionFieldNumber = 13;
  bool ispickselfposition() const;
  void set_ispickselfposition(bool value);

  // .Protobuf.ObjType PickType = 14;
  void clear_picktype();
  static const int kPickTypeFieldNumber = 14;
  ::Protobuf::ObjType picktype() const;
  void set_picktype(::Protobuf::ObjType value);

  // int32 PickDishOrToolType = 15;
  void clear_pickdishortooltype();
  static const int kPickDishOrToolTypeFieldNumber = 15;
  ::PROTOBUF_NAMESPACE_ID::int32 pickdishortooltype() const;
  void set_pickdishortooltype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .Protobuf.Talent Talent = 16;
  void clear_talent();
  static const int kTalentFieldNumber = 16;
  ::Protobuf::Talent talent() const;
  void set_talent(::Protobuf::Talent value);

  // @@protoc_insertion_point(class_scope:Protobuf.MessageToServer)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr speaktext_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  int commandtype_;
  int movedirection_;
  double throwdistance_;
  double throwangle_;
  ::PROTOBUF_NAMESPACE_ID::int32 moveduration_;
  ::PROTOBUF_NAMESPACE_ID::int32 usetype_;
  double parameter1_;
  double parameter2_;
  bool isthrowdish_;
  bool issettalent_;
  bool ispickselfposition_;
  int picktype_;
  ::PROTOBUF_NAMESPACE_ID::int32 pickdishortooltype_;
  int talent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MessageToServer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MessageToServer

// int64 ID = 1;
inline void MessageToServer::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MessageToServer::id() const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToServer.ID)
  return id_;
}
inline void MessageToServer::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.MessageToServer.ID)
}

// .Protobuf.CommandType CommandType = 2;
inline void MessageToServer::clear_commandtype() {
  commandtype_ = 0;
}
inline ::Protobuf::CommandType MessageToServer::commandtype() const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToServer.CommandType)
  return static_cast< ::Protobuf::CommandType >(commandtype_);
}
inline void MessageToServer::set_commandtype(::Protobuf::CommandType value) {
  
  commandtype_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.MessageToServer.CommandType)
}

// .Protobuf.Direction MoveDirection = 3;
inline void MessageToServer::clear_movedirection() {
  movedirection_ = 0;
}
inline ::Protobuf::Direction MessageToServer::movedirection() const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToServer.MoveDirection)
  return static_cast< ::Protobuf::Direction >(movedirection_);
}
inline void MessageToServer::set_movedirection(::Protobuf::Direction value) {
  
  movedirection_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.MessageToServer.MoveDirection)
}

// int32 MoveDuration = 4;
inline void MessageToServer::clear_moveduration() {
  moveduration_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageToServer::moveduration() const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToServer.MoveDuration)
  return moveduration_;
}
inline void MessageToServer::set_moveduration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  moveduration_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.MessageToServer.MoveDuration)
}

// double ThrowDistance = 5;
inline void MessageToServer::clear_throwdistance() {
  throwdistance_ = 0;
}
inline double MessageToServer::throwdistance() const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToServer.ThrowDistance)
  return throwdistance_;
}
inline void MessageToServer::set_throwdistance(double value) {
  
  throwdistance_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.MessageToServer.ThrowDistance)
}

// double ThrowAngle = 6;
inline void MessageToServer::clear_throwangle() {
  throwangle_ = 0;
}
inline double MessageToServer::throwangle() const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToServer.ThrowAngle)
  return throwangle_;
}
inline void MessageToServer::set_throwangle(double value) {
  
  throwangle_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.MessageToServer.ThrowAngle)
}

// bool IsThrowDish = 7;
inline void MessageToServer::clear_isthrowdish() {
  isthrowdish_ = false;
}
inline bool MessageToServer::isthrowdish() const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToServer.IsThrowDish)
  return isthrowdish_;
}
inline void MessageToServer::set_isthrowdish(bool value) {
  
  isthrowdish_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.MessageToServer.IsThrowDish)
}

// int32 UseType = 8;
inline void MessageToServer::clear_usetype() {
  usetype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageToServer::usetype() const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToServer.UseType)
  return usetype_;
}
inline void MessageToServer::set_usetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  usetype_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.MessageToServer.UseType)
}

// string SpeakText = 9;
inline void MessageToServer::clear_speaktext() {
  speaktext_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MessageToServer::speaktext() const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToServer.SpeakText)
  return speaktext_.GetNoArena();
}
inline void MessageToServer::set_speaktext(const std::string& value) {
  
  speaktext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protobuf.MessageToServer.SpeakText)
}
inline void MessageToServer::set_speaktext(std::string&& value) {
  
  speaktext_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protobuf.MessageToServer.SpeakText)
}
inline void MessageToServer::set_speaktext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  speaktext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protobuf.MessageToServer.SpeakText)
}
inline void MessageToServer::set_speaktext(const char* value, size_t size) {
  
  speaktext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protobuf.MessageToServer.SpeakText)
}
inline std::string* MessageToServer::mutable_speaktext() {
  
  // @@protoc_insertion_point(field_mutable:Protobuf.MessageToServer.SpeakText)
  return speaktext_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageToServer::release_speaktext() {
  // @@protoc_insertion_point(field_release:Protobuf.MessageToServer.SpeakText)
  
  return speaktext_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageToServer::set_allocated_speaktext(std::string* speaktext) {
  if (speaktext != nullptr) {
    
  } else {
    
  }
  speaktext_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), speaktext);
  // @@protoc_insertion_point(field_set_allocated:Protobuf.MessageToServer.SpeakText)
}

// double Parameter1 = 10;
inline void MessageToServer::clear_parameter1() {
  parameter1_ = 0;
}
inline double MessageToServer::parameter1() const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToServer.Parameter1)
  return parameter1_;
}
inline void MessageToServer::set_parameter1(double value) {
  
  parameter1_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.MessageToServer.Parameter1)
}

// double Parameter2 = 11;
inline void MessageToServer::clear_parameter2() {
  parameter2_ = 0;
}
inline double MessageToServer::parameter2() const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToServer.Parameter2)
  return parameter2_;
}
inline void MessageToServer::set_parameter2(double value) {
  
  parameter2_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.MessageToServer.Parameter2)
}

// bool IsSetTalent = 12;
inline void MessageToServer::clear_issettalent() {
  issettalent_ = false;
}
inline bool MessageToServer::issettalent() const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToServer.IsSetTalent)
  return issettalent_;
}
inline void MessageToServer::set_issettalent(bool value) {
  
  issettalent_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.MessageToServer.IsSetTalent)
}

// bool IsPickSelfPosition = 13;
inline void MessageToServer::clear_ispickselfposition() {
  ispickselfposition_ = false;
}
inline bool MessageToServer::ispickselfposition() const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToServer.IsPickSelfPosition)
  return ispickselfposition_;
}
inline void MessageToServer::set_ispickselfposition(bool value) {
  
  ispickselfposition_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.MessageToServer.IsPickSelfPosition)
}

// .Protobuf.ObjType PickType = 14;
inline void MessageToServer::clear_picktype() {
  picktype_ = 0;
}
inline ::Protobuf::ObjType MessageToServer::picktype() const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToServer.PickType)
  return static_cast< ::Protobuf::ObjType >(picktype_);
}
inline void MessageToServer::set_picktype(::Protobuf::ObjType value) {
  
  picktype_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.MessageToServer.PickType)
}

// int32 PickDishOrToolType = 15;
inline void MessageToServer::clear_pickdishortooltype() {
  pickdishortooltype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageToServer::pickdishortooltype() const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToServer.PickDishOrToolType)
  return pickdishortooltype_;
}
inline void MessageToServer::set_pickdishortooltype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pickdishortooltype_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.MessageToServer.PickDishOrToolType)
}

// .Protobuf.Talent Talent = 16;
inline void MessageToServer::clear_talent() {
  talent_ = 0;
}
inline ::Protobuf::Talent MessageToServer::talent() const {
  // @@protoc_insertion_point(field_get:Protobuf.MessageToServer.Talent)
  return static_cast< ::Protobuf::Talent >(talent_);
}
inline void MessageToServer::set_talent(::Protobuf::Talent value) {
  
  talent_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.MessageToServer.Talent)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protobuf

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Protobuf::CommandType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protobuf::CommandType>() {
  return ::Protobuf::CommandType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MessageToServer_2eproto
