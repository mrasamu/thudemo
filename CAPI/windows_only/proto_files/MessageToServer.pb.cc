// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageToServer.proto

#include "MessageToServer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace Protobuf {
class MessageToServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageToServer> _instance;
} _MessageToServer_default_instance_;
}  // namespace Protobuf
static void InitDefaultsscc_info_MessageToServer_MessageToServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Protobuf::_MessageToServer_default_instance_;
    new (ptr) ::Protobuf::MessageToServer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Protobuf::MessageToServer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageToServer_MessageToServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MessageToServer_MessageToServer_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_MessageToServer_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_MessageToServer_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_MessageToServer_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_MessageToServer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToServer, id_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToServer, commandtype_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToServer, movedirection_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToServer, moveduration_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToServer, throwdistance_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToServer, throwangle_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToServer, isthrowdish_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToServer, usetype_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToServer, speaktext_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToServer, parameter1_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToServer, parameter2_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToServer, issettalent_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToServer, ispickselfposition_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToServer, picktype_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToServer, pickdishortooltype_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToServer, talent_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Protobuf::MessageToServer)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protobuf::_MessageToServer_default_instance_),
};

const char descriptor_table_protodef_MessageToServer_2eproto[] =
  "\n\025MessageToServer.proto\022\010Protobuf\032\025Messa"
  "geToClient.proto\"\253\003\n\017MessageToServer\022\n\n\002"
  "ID\030\001 \001(\003\022*\n\013CommandType\030\002 \001(\0162\025.Protobuf"
  ".CommandType\022*\n\rMoveDirection\030\003 \001(\0162\023.Pr"
  "otobuf.Direction\022\024\n\014MoveDuration\030\004 \001(\005\022\025"
  "\n\rThrowDistance\030\005 \001(\001\022\022\n\nThrowAngle\030\006 \001("
  "\001\022\023\n\013IsThrowDish\030\007 \001(\010\022\017\n\007UseType\030\010 \001(\005\022"
  "\021\n\tSpeakText\030\t \001(\t\022\022\n\nParameter1\030\n \001(\001\022\022"
  "\n\nParameter2\030\013 \001(\001\022\023\n\013IsSetTalent\030\014 \001(\010\022"
  "\032\n\022IsPickSelfPosition\030\r \001(\010\022#\n\010PickType\030"
  "\016 \001(\0162\021.Protobuf.ObjType\022\032\n\022PickDishOrTo"
  "olType\030\017 \001(\005\022 \n\006Talent\030\020 \001(\0162\020.Protobuf."
  "Talent*]\n\013CommandType\022\010\n\004Move\020\000\022\010\n\004Pick\020"
  "\001\022\007\n\003Put\020\002\022\007\n\003Use\020\003\022\010\n\004Stop\020\004\022\t\n\005Speak\020\005"
  "\022\023\n\017CommandTypeSize\020\006B\026\252\002\023Communication."
  "Protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_MessageToServer_2eproto_deps[1] = {
  &::descriptor_table_MessageToClient_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_MessageToServer_2eproto_sccs[1] = {
  &scc_info_MessageToServer_MessageToServer_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_MessageToServer_2eproto_once;
static bool descriptor_table_MessageToServer_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MessageToServer_2eproto = {
  &descriptor_table_MessageToServer_2eproto_initialized, descriptor_table_protodef_MessageToServer_2eproto, "MessageToServer.proto", 613,
  &descriptor_table_MessageToServer_2eproto_once, descriptor_table_MessageToServer_2eproto_sccs, descriptor_table_MessageToServer_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_MessageToServer_2eproto::offsets,
  file_level_metadata_MessageToServer_2eproto, 1, file_level_enum_descriptors_MessageToServer_2eproto, file_level_service_descriptors_MessageToServer_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_MessageToServer_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_MessageToServer_2eproto), true);
namespace Protobuf {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MessageToServer_2eproto);
  return file_level_enum_descriptors_MessageToServer_2eproto[0];
}
bool CommandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void MessageToServer::InitAsDefaultInstance() {
}
class MessageToServer::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageToServer::kIDFieldNumber;
const int MessageToServer::kCommandTypeFieldNumber;
const int MessageToServer::kMoveDirectionFieldNumber;
const int MessageToServer::kMoveDurationFieldNumber;
const int MessageToServer::kThrowDistanceFieldNumber;
const int MessageToServer::kThrowAngleFieldNumber;
const int MessageToServer::kIsThrowDishFieldNumber;
const int MessageToServer::kUseTypeFieldNumber;
const int MessageToServer::kSpeakTextFieldNumber;
const int MessageToServer::kParameter1FieldNumber;
const int MessageToServer::kParameter2FieldNumber;
const int MessageToServer::kIsSetTalentFieldNumber;
const int MessageToServer::kIsPickSelfPositionFieldNumber;
const int MessageToServer::kPickTypeFieldNumber;
const int MessageToServer::kPickDishOrToolTypeFieldNumber;
const int MessageToServer::kTalentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageToServer::MessageToServer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protobuf.MessageToServer)
}
MessageToServer::MessageToServer(const MessageToServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  speaktext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.speaktext().size() > 0) {
    speaktext_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.speaktext_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&talent_) -
    reinterpret_cast<char*>(&id_)) + sizeof(talent_));
  // @@protoc_insertion_point(copy_constructor:Protobuf.MessageToServer)
}

void MessageToServer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageToServer_MessageToServer_2eproto.base);
  speaktext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&talent_) -
      reinterpret_cast<char*>(&id_)) + sizeof(talent_));
}

MessageToServer::~MessageToServer() {
  // @@protoc_insertion_point(destructor:Protobuf.MessageToServer)
  SharedDtor();
}

void MessageToServer::SharedDtor() {
  speaktext_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MessageToServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageToServer& MessageToServer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageToServer_MessageToServer_2eproto.base);
  return *internal_default_instance();
}


void MessageToServer::Clear() {
// @@protoc_insertion_point(message_clear_start:Protobuf.MessageToServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  speaktext_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&talent_) -
      reinterpret_cast<char*>(&id_)) + sizeof(talent_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MessageToServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protobuf.CommandType CommandType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_commandtype(static_cast<::Protobuf::CommandType>(val));
        } else goto handle_unusual;
        continue;
      // .Protobuf.Direction MoveDirection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_movedirection(static_cast<::Protobuf::Direction>(val));
        } else goto handle_unusual;
        continue;
      // int32 MoveDuration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          moveduration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double ThrowDistance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          throwdistance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ThrowAngle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          throwangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool IsThrowDish = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          isthrowdish_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 UseType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          usetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string SpeakText = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_speaktext(), ptr, ctx, "Protobuf.MessageToServer.SpeakText");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double Parameter1 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          parameter1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double Parameter2 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          parameter2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool IsSetTalent = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          issettalent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool IsPickSelfPosition = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ispickselfposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protobuf.ObjType PickType = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_picktype(static_cast<::Protobuf::ObjType>(val));
        } else goto handle_unusual;
        continue;
      // int32 PickDishOrToolType = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          pickdishortooltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protobuf.Talent Talent = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_talent(static_cast<::Protobuf::Talent>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MessageToServer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protobuf.MessageToServer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 ID = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Protobuf.CommandType CommandType = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_commandtype(static_cast< ::Protobuf::CommandType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Protobuf.Direction MoveDirection = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_movedirection(static_cast< ::Protobuf::Direction >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 MoveDuration = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &moveduration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ThrowDistance = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throwdistance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ThrowAngle = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throwangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool IsThrowDish = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isthrowdish_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 UseType = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &usetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string SpeakText = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_speaktext()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->speaktext().data(), static_cast<int>(this->speaktext().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Protobuf.MessageToServer.SpeakText"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Parameter1 = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (81 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &parameter1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Parameter2 = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (89 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &parameter2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool IsSetTalent = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issettalent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool IsPickSelfPosition = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispickselfposition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Protobuf.ObjType PickType = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_picktype(static_cast< ::Protobuf::ObjType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 PickDishOrToolType = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pickdishortooltype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Protobuf.Talent Talent = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_talent(static_cast< ::Protobuf::Talent >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protobuf.MessageToServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protobuf.MessageToServer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MessageToServer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protobuf.MessageToServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ID = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // .Protobuf.CommandType CommandType = 2;
  if (this->commandtype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->commandtype(), output);
  }

  // .Protobuf.Direction MoveDirection = 3;
  if (this->movedirection() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->movedirection(), output);
  }

  // int32 MoveDuration = 4;
  if (this->moveduration() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->moveduration(), output);
  }

  // double ThrowDistance = 5;
  if (!(this->throwdistance() <= 0 && this->throwdistance() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->throwdistance(), output);
  }

  // double ThrowAngle = 6;
  if (!(this->throwangle() <= 0 && this->throwangle() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->throwangle(), output);
  }

  // bool IsThrowDish = 7;
  if (this->isthrowdish() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->isthrowdish(), output);
  }

  // int32 UseType = 8;
  if (this->usetype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->usetype(), output);
  }

  // string SpeakText = 9;
  if (this->speaktext().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->speaktext().data(), static_cast<int>(this->speaktext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protobuf.MessageToServer.SpeakText");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->speaktext(), output);
  }

  // double Parameter1 = 10;
  if (!(this->parameter1() <= 0 && this->parameter1() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(10, this->parameter1(), output);
  }

  // double Parameter2 = 11;
  if (!(this->parameter2() <= 0 && this->parameter2() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(11, this->parameter2(), output);
  }

  // bool IsSetTalent = 12;
  if (this->issettalent() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(12, this->issettalent(), output);
  }

  // bool IsPickSelfPosition = 13;
  if (this->ispickselfposition() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(13, this->ispickselfposition(), output);
  }

  // .Protobuf.ObjType PickType = 14;
  if (this->picktype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      14, this->picktype(), output);
  }

  // int32 PickDishOrToolType = 15;
  if (this->pickdishortooltype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(15, this->pickdishortooltype(), output);
  }

  // .Protobuf.Talent Talent = 16;
  if (this->talent() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      16, this->talent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protobuf.MessageToServer)
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageToServer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protobuf.MessageToServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ID = 1;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // .Protobuf.CommandType CommandType = 2;
  if (this->commandtype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->commandtype(), target);
  }

  // .Protobuf.Direction MoveDirection = 3;
  if (this->movedirection() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->movedirection(), target);
  }

  // int32 MoveDuration = 4;
  if (this->moveduration() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->moveduration(), target);
  }

  // double ThrowDistance = 5;
  if (!(this->throwdistance() <= 0 && this->throwdistance() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->throwdistance(), target);
  }

  // double ThrowAngle = 6;
  if (!(this->throwangle() <= 0 && this->throwangle() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->throwangle(), target);
  }

  // bool IsThrowDish = 7;
  if (this->isthrowdish() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->isthrowdish(), target);
  }

  // int32 UseType = 8;
  if (this->usetype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->usetype(), target);
  }

  // string SpeakText = 9;
  if (this->speaktext().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->speaktext().data(), static_cast<int>(this->speaktext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protobuf.MessageToServer.SpeakText");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        9, this->speaktext(), target);
  }

  // double Parameter1 = 10;
  if (!(this->parameter1() <= 0 && this->parameter1() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->parameter1(), target);
  }

  // double Parameter2 = 11;
  if (!(this->parameter2() <= 0 && this->parameter2() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->parameter2(), target);
  }

  // bool IsSetTalent = 12;
  if (this->issettalent() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->issettalent(), target);
  }

  // bool IsPickSelfPosition = 13;
  if (this->ispickselfposition() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->ispickselfposition(), target);
  }

  // .Protobuf.ObjType PickType = 14;
  if (this->picktype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->picktype(), target);
  }

  // int32 PickDishOrToolType = 15;
  if (this->pickdishortooltype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->pickdishortooltype(), target);
  }

  // .Protobuf.Talent Talent = 16;
  if (this->talent() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      16, this->talent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protobuf.MessageToServer)
  return target;
}

size_t MessageToServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protobuf.MessageToServer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string SpeakText = 9;
  if (this->speaktext().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->speaktext());
  }

  // int64 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // .Protobuf.CommandType CommandType = 2;
  if (this->commandtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->commandtype());
  }

  // .Protobuf.Direction MoveDirection = 3;
  if (this->movedirection() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->movedirection());
  }

  // double ThrowDistance = 5;
  if (!(this->throwdistance() <= 0 && this->throwdistance() >= 0)) {
    total_size += 1 + 8;
  }

  // double ThrowAngle = 6;
  if (!(this->throwangle() <= 0 && this->throwangle() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 MoveDuration = 4;
  if (this->moveduration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->moveduration());
  }

  // int32 UseType = 8;
  if (this->usetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->usetype());
  }

  // double Parameter1 = 10;
  if (!(this->parameter1() <= 0 && this->parameter1() >= 0)) {
    total_size += 1 + 8;
  }

  // double Parameter2 = 11;
  if (!(this->parameter2() <= 0 && this->parameter2() >= 0)) {
    total_size += 1 + 8;
  }

  // bool IsThrowDish = 7;
  if (this->isthrowdish() != 0) {
    total_size += 1 + 1;
  }

  // bool IsSetTalent = 12;
  if (this->issettalent() != 0) {
    total_size += 1 + 1;
  }

  // bool IsPickSelfPosition = 13;
  if (this->ispickselfposition() != 0) {
    total_size += 1 + 1;
  }

  // .Protobuf.ObjType PickType = 14;
  if (this->picktype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->picktype());
  }

  // int32 PickDishOrToolType = 15;
  if (this->pickdishortooltype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->pickdishortooltype());
  }

  // .Protobuf.Talent Talent = 16;
  if (this->talent() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->talent());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageToServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protobuf.MessageToServer)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageToServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageToServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protobuf.MessageToServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protobuf.MessageToServer)
    MergeFrom(*source);
  }
}

void MessageToServer::MergeFrom(const MessageToServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protobuf.MessageToServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.speaktext().size() > 0) {

    speaktext_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.speaktext_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.commandtype() != 0) {
    set_commandtype(from.commandtype());
  }
  if (from.movedirection() != 0) {
    set_movedirection(from.movedirection());
  }
  if (!(from.throwdistance() <= 0 && from.throwdistance() >= 0)) {
    set_throwdistance(from.throwdistance());
  }
  if (!(from.throwangle() <= 0 && from.throwangle() >= 0)) {
    set_throwangle(from.throwangle());
  }
  if (from.moveduration() != 0) {
    set_moveduration(from.moveduration());
  }
  if (from.usetype() != 0) {
    set_usetype(from.usetype());
  }
  if (!(from.parameter1() <= 0 && from.parameter1() >= 0)) {
    set_parameter1(from.parameter1());
  }
  if (!(from.parameter2() <= 0 && from.parameter2() >= 0)) {
    set_parameter2(from.parameter2());
  }
  if (from.isthrowdish() != 0) {
    set_isthrowdish(from.isthrowdish());
  }
  if (from.issettalent() != 0) {
    set_issettalent(from.issettalent());
  }
  if (from.ispickselfposition() != 0) {
    set_ispickselfposition(from.ispickselfposition());
  }
  if (from.picktype() != 0) {
    set_picktype(from.picktype());
  }
  if (from.pickdishortooltype() != 0) {
    set_pickdishortooltype(from.pickdishortooltype());
  }
  if (from.talent() != 0) {
    set_talent(from.talent());
  }
}

void MessageToServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protobuf.MessageToServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageToServer::CopyFrom(const MessageToServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protobuf.MessageToServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageToServer::IsInitialized() const {
  return true;
}

void MessageToServer::Swap(MessageToServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageToServer::InternalSwap(MessageToServer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  speaktext_.Swap(&other->speaktext_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(commandtype_, other->commandtype_);
  swap(movedirection_, other->movedirection_);
  swap(throwdistance_, other->throwdistance_);
  swap(throwangle_, other->throwangle_);
  swap(moveduration_, other->moveduration_);
  swap(usetype_, other->usetype_);
  swap(parameter1_, other->parameter1_);
  swap(parameter2_, other->parameter2_);
  swap(isthrowdish_, other->isthrowdish_);
  swap(issettalent_, other->issettalent_);
  swap(ispickselfposition_, other->ispickselfposition_);
  swap(picktype_, other->picktype_);
  swap(pickdishortooltype_, other->pickdishortooltype_);
  swap(talent_, other->talent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageToServer::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Protobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protobuf::MessageToServer* Arena::CreateMaybeMessage< ::Protobuf::MessageToServer >(Arena* arena) {
  return Arena::CreateInternal< ::Protobuf::MessageToServer >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
