// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageToClient.proto

#include "MessageToClient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_MessageToClient_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameObject_MessageToClient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MessageToClient_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MessageToClient_GameObjectListEntry_DoNotUse_MessageToClient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MessageToClient_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageToClient_ScoresEntry_DoNotUse_MessageToClient_2eproto;
namespace Protobuf {
class GameObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameObject> _instance;
} _GameObject_default_instance_;
class MessageToClient_GameObjectListEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageToClient_GameObjectListEntry_DoNotUse> _instance;
} _MessageToClient_GameObjectListEntry_DoNotUse_default_instance_;
class MessageToClient_ScoresEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageToClient_ScoresEntry_DoNotUse> _instance;
} _MessageToClient_ScoresEntry_DoNotUse_default_instance_;
class MessageToClientDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageToClient> _instance;
} _MessageToClient_default_instance_;
}  // namespace Protobuf
static void InitDefaultsscc_info_GameObject_MessageToClient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Protobuf::_GameObject_default_instance_;
    new (ptr) ::Protobuf::GameObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Protobuf::GameObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameObject_MessageToClient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GameObject_MessageToClient_2eproto}, {}};

static void InitDefaultsscc_info_MessageToClient_MessageToClient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Protobuf::_MessageToClient_default_instance_;
    new (ptr) ::Protobuf::MessageToClient();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Protobuf::MessageToClient::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MessageToClient_MessageToClient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_MessageToClient_MessageToClient_2eproto}, {
      &scc_info_MessageToClient_GameObjectListEntry_DoNotUse_MessageToClient_2eproto.base,
      &scc_info_MessageToClient_ScoresEntry_DoNotUse_MessageToClient_2eproto.base,}};

static void InitDefaultsscc_info_MessageToClient_GameObjectListEntry_DoNotUse_MessageToClient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Protobuf::_MessageToClient_GameObjectListEntry_DoNotUse_default_instance_;
    new (ptr) ::Protobuf::MessageToClient_GameObjectListEntry_DoNotUse();
  }
  ::Protobuf::MessageToClient_GameObjectListEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MessageToClient_GameObjectListEntry_DoNotUse_MessageToClient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MessageToClient_GameObjectListEntry_DoNotUse_MessageToClient_2eproto}, {
      &scc_info_GameObject_MessageToClient_2eproto.base,}};

static void InitDefaultsscc_info_MessageToClient_ScoresEntry_DoNotUse_MessageToClient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Protobuf::_MessageToClient_ScoresEntry_DoNotUse_default_instance_;
    new (ptr) ::Protobuf::MessageToClient_ScoresEntry_DoNotUse();
  }
  ::Protobuf::MessageToClient_ScoresEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageToClient_ScoresEntry_DoNotUse_MessageToClient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MessageToClient_ScoresEntry_DoNotUse_MessageToClient_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_MessageToClient_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_MessageToClient_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_MessageToClient_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_MessageToClient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protobuf::GameObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protobuf::GameObject, positionx_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::GameObject, positiony_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::GameObject, direction_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::GameObject, objtype_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::GameObject, blocktype_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::GameObject, dishtype_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::GameObject, tooltype_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::GameObject, triggertype_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::GameObject, ismoving_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::GameObject, recievetext_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::GameObject, team_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::GameObject, sightrange_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::GameObject, movespeed_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::GameObject, maxthrowdistance_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToClient_GameObjectListEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToClient_GameObjectListEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToClient_GameObjectListEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToClient_GameObjectListEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToClient_ScoresEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToClient_ScoresEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToClient_ScoresEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToClient_ScoresEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToClient, gameobjectlist_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToClient, tasks_),
  PROTOBUF_FIELD_OFFSET(::Protobuf::MessageToClient, scores_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Protobuf::GameObject)},
  { 19, 26, sizeof(::Protobuf::MessageToClient_GameObjectListEntry_DoNotUse)},
  { 28, 35, sizeof(::Protobuf::MessageToClient_ScoresEntry_DoNotUse)},
  { 37, -1, sizeof(::Protobuf::MessageToClient)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protobuf::_GameObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protobuf::_MessageToClient_GameObjectListEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protobuf::_MessageToClient_ScoresEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protobuf::_MessageToClient_default_instance_),
};

const char descriptor_table_protodef_MessageToClient_2eproto[] =
  "\n\025MessageToClient.proto\022\010Protobuf\"\224\003\n\nGa"
  "meObject\022\021\n\tPositionX\030\001 \001(\001\022\021\n\tPositionY"
  "\030\002 \001(\001\022&\n\tDirection\030\003 \001(\0162\023.Protobuf.Dir"
  "ection\022\"\n\007ObjType\030\004 \001(\0162\021.Protobuf.ObjTy"
  "pe\022&\n\tBlockType\030\005 \001(\0162\023.Protobuf.BlockTy"
  "pe\022$\n\010DishType\030\006 \001(\0162\022.Protobuf.DishType"
  "\022$\n\010ToolType\030\007 \001(\0162\022.Protobuf.ToolType\022*"
  "\n\013TriggerType\030\010 \001(\0162\025.Protobuf.TriggerTy"
  "pe\022\020\n\010isMoving\030\t \001(\010\022\023\n\013RecieveText\030\n \001("
  "\t\022\014\n\004team\030\013 \001(\005\022\022\n\nSightRange\030\014 \001(\005\022\021\n\tM"
  "oveSpeed\030\r \001(\001\022\030\n\020MaxThrowDistance\030\016 \001(\005"
  "\"\256\002\n\017MessageToClient\022E\n\016GameObjectList\030\001"
  " \003(\0132-.Protobuf.MessageToClient.GameObje"
  "ctListEntry\022!\n\005Tasks\030\002 \003(\0162\022.Protobuf.Di"
  "shType\0225\n\006Scores\030\003 \003(\0132%.Protobuf.Messag"
  "eToClient.ScoresEntry\032K\n\023GameObjectListE"
  "ntry\022\013\n\003key\030\001 \001(\003\022#\n\005value\030\002 \001(\0132\024.Proto"
  "buf.GameObject:\0028\001\032-\n\013ScoresEntry\022\013\n\003key"
  "\030\001 \001(\005\022\r\n\005value\030\002 \001(\005:\0028\001*R\n\007ObjType\022\n\n\006"
  "People\020\000\022\t\n\005Block\020\001\022\010\n\004Dish\020\002\022\010\n\004Tool\020\003\022"
  "\013\n\007Trigger\020\004\022\017\n\013ObjTypeSize\020\005*m\n\tBlockTy"
  "pe\022\010\n\004Wall\020\000\022\t\n\005Table\020\001\022\r\n\tFoodPoint\020\002\022\n"
  "\n\006Cooker\020\003\022\016\n\nRubbishBin\020\004\022\r\n\tTaskPoint\020"
  "\005\022\021\n\rBlockTypeSize\020\006*\330\003\n\010DishType\022\r\n\tDis"
  "hEmpty\020\000\022\t\n\005Wheat\020\001\022\010\n\004Rice\020\002\022\n\n\006Tomato\020"
  "\003\022\007\n\003Egg\020\004\022\010\n\004Beef\020\005\022\010\n\004Pork\020\006\022\n\n\006Potato"
  "\020\007\022\013\n\007Lettuce\020\010\022\r\n\tDishSize1\020\t\022\t\n\005Flour\020"
  "\n\022\n\n\006Noodle\020\013\022\t\n\005Bread\020\014\022\013\n\007Ketchup\020\r\022\016\n"
  "\nCookedRice\020\016\022\022\n\016TomatoFriedEgg\020\017\022\030\n\024Tom"
  "atoFriedEggNoodle\020\020\022\016\n\nBeefNoodle\020\021\022\014\n\010O"
  "verRice\020\022\022\014\n\010Barbecue\020\023\022\017\n\013FrenchFries\020\024"
  "\022\r\n\tHamburger\020\025\022\r\n\tSpicedPot\020\026\022\016\n\nSpiced"
  "Pot3\020\027\022\016\n\nSpicedPot4\020\030\022\016\n\nSpicedPot5\020\031\022\016"
  "\n\nSpicedPot6\020\032\022\r\n\tDishSize2\020\033\022\022\n\016OverCoo"
  "kedDish\020\034\022\014\n\010DarkDish\020\035\022\017\n\013CookingDish\020\036"
  "\022\r\n\tDishSize3\020\037*\214\002\n\010ToolType\022\r\n\tToolEmpt"
  "y\020\000\022\016\n\nTigerShoes\020\001\022\r\n\tSpeedBuff\020\002\022\020\n\014St"
  "rengthBuff\020\003\022\r\n\tTeleScope\020\004\022\r\n\tCondiment"
  "\020\005\022\016\n\nFertilizer\020\006\022\017\n\013BreastPlate\020\007\022\r\n\tS"
  "paceGate\020\010\022\022\n\016WaveGlueBottle\020\t\022\014\n\010LandMi"
  "ne\020\n\022\014\n\010TrapTool\020\013\022\r\n\tFlashBomb\020\014\022\017\n\013Thr"
  "owHammer\020\r\022\007\n\003Bow\020\016\022\013\n\007Stealer\020\017\022\014\n\010Tool"
  "Size\020\020*a\n\013TriggerType\022\014\n\010WaveGlue\020\000\022\010\n\004T"
  "rap\020\001\022\010\n\004Mine\020\002\022\010\n\004Bomb\020\003\022\t\n\005Arrow\020\004\022\n\n\006"
  "Hammer\020\005\022\017\n\013TriggerSize\020\006*{\n\tDirection\022\t"
  "\n\005Right\020\000\022\013\n\007RightUp\020\001\022\006\n\002Up\020\002\022\n\n\006LeftUp"
  "\020\003\022\010\n\004Left\020\004\022\014\n\010LeftDown\020\005\022\010\n\004Down\020\006\022\r\n\t"
  "RightDown\020\007\022\021\n\rDirectionSize\020\010*e\n\006Talent"
  "\022\010\n\004None\020\000\022\n\n\006Runner\020\001\022\r\n\tStrongMan\020\002\022\010\n"
  "\004Cook\020\003\022\016\n\nTechnician\020\004\022\014\n\010LuckyBoy\020\005\022\016\n"
  "\nTalentSize\020\006B\026\252\002\023Communication.Protob\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_MessageToClient_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_MessageToClient_2eproto_sccs[4] = {
  &scc_info_GameObject_MessageToClient_2eproto.base,
  &scc_info_MessageToClient_MessageToClient_2eproto.base,
  &scc_info_MessageToClient_GameObjectListEntry_DoNotUse_MessageToClient_2eproto.base,
  &scc_info_MessageToClient_ScoresEntry_DoNotUse_MessageToClient_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_MessageToClient_2eproto_once;
static bool descriptor_table_MessageToClient_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MessageToClient_2eproto = {
  &descriptor_table_MessageToClient_2eproto_initialized, descriptor_table_protodef_MessageToClient_2eproto, "MessageToClient.proto", 2045,
  &descriptor_table_MessageToClient_2eproto_once, descriptor_table_MessageToClient_2eproto_sccs, descriptor_table_MessageToClient_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_MessageToClient_2eproto::offsets,
  file_level_metadata_MessageToClient_2eproto, 4, file_level_enum_descriptors_MessageToClient_2eproto, file_level_service_descriptors_MessageToClient_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_MessageToClient_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_MessageToClient_2eproto), true);
namespace Protobuf {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObjType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MessageToClient_2eproto);
  return file_level_enum_descriptors_MessageToClient_2eproto[0];
}
bool ObjType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BlockType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MessageToClient_2eproto);
  return file_level_enum_descriptors_MessageToClient_2eproto[1];
}
bool BlockType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DishType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MessageToClient_2eproto);
  return file_level_enum_descriptors_MessageToClient_2eproto[2];
}
bool DishType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ToolType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MessageToClient_2eproto);
  return file_level_enum_descriptors_MessageToClient_2eproto[3];
}
bool ToolType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TriggerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MessageToClient_2eproto);
  return file_level_enum_descriptors_MessageToClient_2eproto[4];
}
bool TriggerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Direction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MessageToClient_2eproto);
  return file_level_enum_descriptors_MessageToClient_2eproto[5];
}
bool Direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Talent_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MessageToClient_2eproto);
  return file_level_enum_descriptors_MessageToClient_2eproto[6];
}
bool Talent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void GameObject::InitAsDefaultInstance() {
}
class GameObject::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameObject::kPositionXFieldNumber;
const int GameObject::kPositionYFieldNumber;
const int GameObject::kDirectionFieldNumber;
const int GameObject::kObjTypeFieldNumber;
const int GameObject::kBlockTypeFieldNumber;
const int GameObject::kDishTypeFieldNumber;
const int GameObject::kToolTypeFieldNumber;
const int GameObject::kTriggerTypeFieldNumber;
const int GameObject::kIsMovingFieldNumber;
const int GameObject::kRecieveTextFieldNumber;
const int GameObject::kTeamFieldNumber;
const int GameObject::kSightRangeFieldNumber;
const int GameObject::kMoveSpeedFieldNumber;
const int GameObject::kMaxThrowDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameObject::GameObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protobuf.GameObject)
}
GameObject::GameObject(const GameObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  recievetext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.recievetext().size() > 0) {
    recievetext_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.recievetext_);
  }
  ::memcpy(&positionx_, &from.positionx_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxthrowdistance_) -
    reinterpret_cast<char*>(&positionx_)) + sizeof(maxthrowdistance_));
  // @@protoc_insertion_point(copy_constructor:Protobuf.GameObject)
}

void GameObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameObject_MessageToClient_2eproto.base);
  recievetext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&positionx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxthrowdistance_) -
      reinterpret_cast<char*>(&positionx_)) + sizeof(maxthrowdistance_));
}

GameObject::~GameObject() {
  // @@protoc_insertion_point(destructor:Protobuf.GameObject)
  SharedDtor();
}

void GameObject::SharedDtor() {
  recievetext_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameObject& GameObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameObject_MessageToClient_2eproto.base);
  return *internal_default_instance();
}


void GameObject::Clear() {
// @@protoc_insertion_point(message_clear_start:Protobuf.GameObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recievetext_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&positionx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxthrowdistance_) -
      reinterpret_cast<char*>(&positionx_)) + sizeof(maxthrowdistance_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double PositionX = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          positionx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double PositionY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          positiony_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .Protobuf.Direction Direction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_direction(static_cast<::Protobuf::Direction>(val));
        } else goto handle_unusual;
        continue;
      // .Protobuf.ObjType ObjType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_objtype(static_cast<::Protobuf::ObjType>(val));
        } else goto handle_unusual;
        continue;
      // .Protobuf.BlockType BlockType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_blocktype(static_cast<::Protobuf::BlockType>(val));
        } else goto handle_unusual;
        continue;
      // .Protobuf.DishType DishType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_dishtype(static_cast<::Protobuf::DishType>(val));
        } else goto handle_unusual;
        continue;
      // .Protobuf.ToolType ToolType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_tooltype(static_cast<::Protobuf::ToolType>(val));
        } else goto handle_unusual;
        continue;
      // .Protobuf.TriggerType TriggerType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_triggertype(static_cast<::Protobuf::TriggerType>(val));
        } else goto handle_unusual;
        continue;
      // bool isMoving = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ismoving_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string RecieveText = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_recievetext(), ptr, ctx, "Protobuf.GameObject.RecieveText");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 team = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 SightRange = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          sightrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double MoveSpeed = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          movespeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 MaxThrowDistance = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          maxthrowdistance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameObject::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protobuf.GameObject)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double PositionX = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &positionx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double PositionY = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &positiony_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Protobuf.Direction Direction = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_direction(static_cast< ::Protobuf::Direction >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Protobuf.ObjType ObjType = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_objtype(static_cast< ::Protobuf::ObjType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Protobuf.BlockType BlockType = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_blocktype(static_cast< ::Protobuf::BlockType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Protobuf.DishType DishType = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dishtype(static_cast< ::Protobuf::DishType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Protobuf.ToolType ToolType = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_tooltype(static_cast< ::Protobuf::ToolType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Protobuf.TriggerType TriggerType = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_triggertype(static_cast< ::Protobuf::TriggerType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isMoving = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismoving_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string RecieveText = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_recievetext()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->recievetext().data(), static_cast<int>(this->recievetext().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Protobuf.GameObject.RecieveText"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 team = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 SightRange = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &sightrange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double MoveSpeed = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (105 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &movespeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 MaxThrowDistance = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxthrowdistance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protobuf.GameObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protobuf.GameObject)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameObject::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protobuf.GameObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double PositionX = 1;
  if (!(this->positionx() <= 0 && this->positionx() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->positionx(), output);
  }

  // double PositionY = 2;
  if (!(this->positiony() <= 0 && this->positiony() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->positiony(), output);
  }

  // .Protobuf.Direction Direction = 3;
  if (this->direction() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->direction(), output);
  }

  // .Protobuf.ObjType ObjType = 4;
  if (this->objtype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->objtype(), output);
  }

  // .Protobuf.BlockType BlockType = 5;
  if (this->blocktype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->blocktype(), output);
  }

  // .Protobuf.DishType DishType = 6;
  if (this->dishtype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->dishtype(), output);
  }

  // .Protobuf.ToolType ToolType = 7;
  if (this->tooltype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->tooltype(), output);
  }

  // .Protobuf.TriggerType TriggerType = 8;
  if (this->triggertype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      8, this->triggertype(), output);
  }

  // bool isMoving = 9;
  if (this->ismoving() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->ismoving(), output);
  }

  // string RecieveText = 10;
  if (this->recievetext().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->recievetext().data(), static_cast<int>(this->recievetext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protobuf.GameObject.RecieveText");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->recievetext(), output);
  }

  // int32 team = 11;
  if (this->team() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(11, this->team(), output);
  }

  // int32 SightRange = 12;
  if (this->sightrange() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(12, this->sightrange(), output);
  }

  // double MoveSpeed = 13;
  if (!(this->movespeed() <= 0 && this->movespeed() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(13, this->movespeed(), output);
  }

  // int32 MaxThrowDistance = 14;
  if (this->maxthrowdistance() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(14, this->maxthrowdistance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protobuf.GameObject)
}

::PROTOBUF_NAMESPACE_ID::uint8* GameObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protobuf.GameObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double PositionX = 1;
  if (!(this->positionx() <= 0 && this->positionx() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->positionx(), target);
  }

  // double PositionY = 2;
  if (!(this->positiony() <= 0 && this->positiony() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->positiony(), target);
  }

  // .Protobuf.Direction Direction = 3;
  if (this->direction() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->direction(), target);
  }

  // .Protobuf.ObjType ObjType = 4;
  if (this->objtype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->objtype(), target);
  }

  // .Protobuf.BlockType BlockType = 5;
  if (this->blocktype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->blocktype(), target);
  }

  // .Protobuf.DishType DishType = 6;
  if (this->dishtype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->dishtype(), target);
  }

  // .Protobuf.ToolType ToolType = 7;
  if (this->tooltype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->tooltype(), target);
  }

  // .Protobuf.TriggerType TriggerType = 8;
  if (this->triggertype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->triggertype(), target);
  }

  // bool isMoving = 9;
  if (this->ismoving() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->ismoving(), target);
  }

  // string RecieveText = 10;
  if (this->recievetext().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->recievetext().data(), static_cast<int>(this->recievetext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protobuf.GameObject.RecieveText");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        10, this->recievetext(), target);
  }

  // int32 team = 11;
  if (this->team() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->team(), target);
  }

  // int32 SightRange = 12;
  if (this->sightrange() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->sightrange(), target);
  }

  // double MoveSpeed = 13;
  if (!(this->movespeed() <= 0 && this->movespeed() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->movespeed(), target);
  }

  // int32 MaxThrowDistance = 14;
  if (this->maxthrowdistance() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->maxthrowdistance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protobuf.GameObject)
  return target;
}

size_t GameObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protobuf.GameObject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string RecieveText = 10;
  if (this->recievetext().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->recievetext());
  }

  // double PositionX = 1;
  if (!(this->positionx() <= 0 && this->positionx() >= 0)) {
    total_size += 1 + 8;
  }

  // double PositionY = 2;
  if (!(this->positiony() <= 0 && this->positiony() >= 0)) {
    total_size += 1 + 8;
  }

  // .Protobuf.Direction Direction = 3;
  if (this->direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->direction());
  }

  // .Protobuf.ObjType ObjType = 4;
  if (this->objtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->objtype());
  }

  // .Protobuf.BlockType BlockType = 5;
  if (this->blocktype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->blocktype());
  }

  // .Protobuf.DishType DishType = 6;
  if (this->dishtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->dishtype());
  }

  // .Protobuf.ToolType ToolType = 7;
  if (this->tooltype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->tooltype());
  }

  // .Protobuf.TriggerType TriggerType = 8;
  if (this->triggertype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->triggertype());
  }

  // bool isMoving = 9;
  if (this->ismoving() != 0) {
    total_size += 1 + 1;
  }

  // int32 team = 11;
  if (this->team() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->team());
  }

  // double MoveSpeed = 13;
  if (!(this->movespeed() <= 0 && this->movespeed() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 SightRange = 12;
  if (this->sightrange() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->sightrange());
  }

  // int32 MaxThrowDistance = 14;
  if (this->maxthrowdistance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->maxthrowdistance());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protobuf.GameObject)
  GOOGLE_DCHECK_NE(&from, this);
  const GameObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protobuf.GameObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protobuf.GameObject)
    MergeFrom(*source);
  }
}

void GameObject::MergeFrom(const GameObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protobuf.GameObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.recievetext().size() > 0) {

    recievetext_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.recievetext_);
  }
  if (!(from.positionx() <= 0 && from.positionx() >= 0)) {
    set_positionx(from.positionx());
  }
  if (!(from.positiony() <= 0 && from.positiony() >= 0)) {
    set_positiony(from.positiony());
  }
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
  if (from.objtype() != 0) {
    set_objtype(from.objtype());
  }
  if (from.blocktype() != 0) {
    set_blocktype(from.blocktype());
  }
  if (from.dishtype() != 0) {
    set_dishtype(from.dishtype());
  }
  if (from.tooltype() != 0) {
    set_tooltype(from.tooltype());
  }
  if (from.triggertype() != 0) {
    set_triggertype(from.triggertype());
  }
  if (from.ismoving() != 0) {
    set_ismoving(from.ismoving());
  }
  if (from.team() != 0) {
    set_team(from.team());
  }
  if (!(from.movespeed() <= 0 && from.movespeed() >= 0)) {
    set_movespeed(from.movespeed());
  }
  if (from.sightrange() != 0) {
    set_sightrange(from.sightrange());
  }
  if (from.maxthrowdistance() != 0) {
    set_maxthrowdistance(from.maxthrowdistance());
  }
}

void GameObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protobuf.GameObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameObject::CopyFrom(const GameObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protobuf.GameObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameObject::IsInitialized() const {
  return true;
}

void GameObject::Swap(GameObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameObject::InternalSwap(GameObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  recievetext_.Swap(&other->recievetext_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(positionx_, other->positionx_);
  swap(positiony_, other->positiony_);
  swap(direction_, other->direction_);
  swap(objtype_, other->objtype_);
  swap(blocktype_, other->blocktype_);
  swap(dishtype_, other->dishtype_);
  swap(tooltype_, other->tooltype_);
  swap(triggertype_, other->triggertype_);
  swap(ismoving_, other->ismoving_);
  swap(team_, other->team_);
  swap(movespeed_, other->movespeed_);
  swap(sightrange_, other->sightrange_);
  swap(maxthrowdistance_, other->maxthrowdistance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

MessageToClient_GameObjectListEntry_DoNotUse::MessageToClient_GameObjectListEntry_DoNotUse() {}
MessageToClient_GameObjectListEntry_DoNotUse::MessageToClient_GameObjectListEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MessageToClient_GameObjectListEntry_DoNotUse::MergeFrom(const MessageToClient_GameObjectListEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MessageToClient_GameObjectListEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void MessageToClient_GameObjectListEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

MessageToClient_ScoresEntry_DoNotUse::MessageToClient_ScoresEntry_DoNotUse() {}
MessageToClient_ScoresEntry_DoNotUse::MessageToClient_ScoresEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MessageToClient_ScoresEntry_DoNotUse::MergeFrom(const MessageToClient_ScoresEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MessageToClient_ScoresEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void MessageToClient_ScoresEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void MessageToClient::InitAsDefaultInstance() {
}
class MessageToClient::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageToClient::kGameObjectListFieldNumber;
const int MessageToClient::kTasksFieldNumber;
const int MessageToClient::kScoresFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageToClient::MessageToClient()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protobuf.MessageToClient)
}
MessageToClient::MessageToClient(const MessageToClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gameobjectlist_.MergeFrom(from.gameobjectlist_);
  scores_.MergeFrom(from.scores_);
  // @@protoc_insertion_point(copy_constructor:Protobuf.MessageToClient)
}

void MessageToClient::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageToClient_MessageToClient_2eproto.base);
}

MessageToClient::~MessageToClient() {
  // @@protoc_insertion_point(destructor:Protobuf.MessageToClient)
  SharedDtor();
}

void MessageToClient::SharedDtor() {
}

void MessageToClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageToClient& MessageToClient::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageToClient_MessageToClient_2eproto.base);
  return *internal_default_instance();
}


void MessageToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:Protobuf.MessageToClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameobjectlist_.Clear();
  tasks_.Clear();
  scores_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MessageToClient::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int64, .Protobuf.GameObject> GameObjectList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&gameobjectlist_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .Protobuf.DishType Tasks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_tasks(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          add_tasks(static_cast<::Protobuf::DishType>(val));
        } else goto handle_unusual;
        continue;
      // map<int32, int32> Scores = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&scores_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MessageToClient::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protobuf.MessageToClient)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int64, .Protobuf.GameObject> GameObjectList = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          MessageToClient_GameObjectListEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              MessageToClient_GameObjectListEntry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::int64, ::Protobuf::GameObject,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::Protobuf::GameObject > > parser(&gameobjectlist_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Protobuf.DishType Tasks = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          ::PROTOBUF_NAMESPACE_ID::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_tasks(static_cast< ::Protobuf::DishType >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_tasks(static_cast< ::Protobuf::DishType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, int32> Scores = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          MessageToClient_ScoresEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              MessageToClient_ScoresEntry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 > > parser(&scores_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protobuf.MessageToClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protobuf.MessageToClient)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MessageToClient::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protobuf.MessageToClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int64, .Protobuf.GameObject> GameObjectList = 1;
  if (!this->gameobjectlist().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::Protobuf::GameObject >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->gameobjectlist().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->gameobjectlist().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::Protobuf::GameObject >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::Protobuf::GameObject >::const_iterator
          it = this->gameobjectlist().begin();
          it != this->gameobjectlist().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        MessageToClient_GameObjectListEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(1, entry, output);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::Protobuf::GameObject >::const_iterator
          it = this->gameobjectlist().begin();
          it != this->gameobjectlist().end(); ++it) {
        MessageToClient_GameObjectListEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(1, entry, output);
      }
    }
  }

  // repeated .Protobuf.DishType Tasks = 2;
  if (this->tasks_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_tasks_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->tasks_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTag(
      this->tasks(i), output);
  }

  // map<int32, int32> Scores = 3;
  if (!this->scores().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->scores().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->scores().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->scores().begin();
          it != this->scores().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        MessageToClient_ScoresEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(3, entry, output);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->scores().begin();
          it != this->scores().end(); ++it) {
        MessageToClient_ScoresEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(3, entry, output);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protobuf.MessageToClient)
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageToClient::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protobuf.MessageToClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int64, .Protobuf.GameObject> GameObjectList = 1;
  if (!this->gameobjectlist().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::Protobuf::GameObject >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->gameobjectlist().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->gameobjectlist().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::Protobuf::GameObject >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::Protobuf::GameObject >::const_iterator
          it = this->gameobjectlist().begin();
          it != this->gameobjectlist().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        MessageToClient_GameObjectListEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, entry, target);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::Protobuf::GameObject >::const_iterator
          it = this->gameobjectlist().begin();
          it != this->gameobjectlist().end(); ++it) {
        MessageToClient_GameObjectListEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, entry, target);
      }
    }
  }

  // repeated .Protobuf.DishType Tasks = 2;
  if (this->tasks_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(      _tasks_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->tasks_, target);
  }

  // map<int32, int32> Scores = 3;
  if (!this->scores().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->scores().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->scores().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->scores().begin();
          it != this->scores().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        MessageToClient_ScoresEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, entry, target);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->scores().begin();
          it != this->scores().end(); ++it) {
        MessageToClient_ScoresEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, entry, target);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protobuf.MessageToClient)
  return target;
}

size_t MessageToClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protobuf.MessageToClient)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int64, .Protobuf.GameObject> GameObjectList = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->gameobjectlist_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::Protobuf::GameObject >::const_iterator
      it = this->gameobjectlist().begin();
      it != this->gameobjectlist().end(); ++it) {
    MessageToClient_GameObjectListEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        MessageSizeNoVirtual(entry);
  }

  // repeated .Protobuf.DishType Tasks = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->tasks_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->tasks(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tasks_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<int32, int32> Scores = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->scores_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->scores().begin();
      it != this->scores().end(); ++it) {
    MessageToClient_ScoresEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        MessageSizeNoVirtual(entry);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageToClient::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protobuf.MessageToClient)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageToClient* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageToClient>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protobuf.MessageToClient)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protobuf.MessageToClient)
    MergeFrom(*source);
  }
}

void MessageToClient::MergeFrom(const MessageToClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protobuf.MessageToClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gameobjectlist_.MergeFrom(from.gameobjectlist_);
  tasks_.MergeFrom(from.tasks_);
  scores_.MergeFrom(from.scores_);
}

void MessageToClient::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protobuf.MessageToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageToClient::CopyFrom(const MessageToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protobuf.MessageToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageToClient::IsInitialized() const {
  return true;
}

void MessageToClient::Swap(MessageToClient* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageToClient::InternalSwap(MessageToClient* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gameobjectlist_.Swap(&other->gameobjectlist_);
  tasks_.InternalSwap(&other->tasks_);
  scores_.Swap(&other->scores_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageToClient::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Protobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protobuf::GameObject* Arena::CreateMaybeMessage< ::Protobuf::GameObject >(Arena* arena) {
  return Arena::CreateInternal< ::Protobuf::GameObject >(arena);
}
template<> PROTOBUF_NOINLINE ::Protobuf::MessageToClient_GameObjectListEntry_DoNotUse* Arena::CreateMaybeMessage< ::Protobuf::MessageToClient_GameObjectListEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::Protobuf::MessageToClient_GameObjectListEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Protobuf::MessageToClient_ScoresEntry_DoNotUse* Arena::CreateMaybeMessage< ::Protobuf::MessageToClient_ScoresEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::Protobuf::MessageToClient_ScoresEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Protobuf::MessageToClient* Arena::CreateMaybeMessage< ::Protobuf::MessageToClient >(Arena* arena) {
  return Arena::CreateInternal< ::Protobuf::MessageToClient >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
